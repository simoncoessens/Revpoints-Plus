import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))
import streamlit as st
import pandas as pd
import json
import base64
import plotly.express as px
import plotly.graph_objects as go # Added for stacked bar

# -------- Paths to local assets -------- #
PROJECT_ROOT = Path(__file__).parents[2]
ASSETS_PATH = PROJECT_ROOT / "consumer/assets"
DATA_PATH = PROJECT_ROOT / "data"
TRANSACTIONS_FILE = DATA_PATH / "revpoint_transactions.json" # Corrected path
LOGO_FILE = ASSETS_PATH / "revolut_logo.png"
PROFILE_FILE = ASSETS_PATH / "user.png"

# ---------- Helper to inline images as <img> tags ---------- #

def img_tag(path: Path, height: int) -> str:
    if not path.exists():
        st.warning(f"Asset not found: {path}")
        return ""
    try:
        mime = "image/png" if path.suffix.lower() == ".png" else "image/jpeg"
        data = base64.b64encode(path.read_bytes()).decode()
        return f'<img src="data:{mime};base64,{data}" height="{height}">'  # noqa: E501
    except Exception as e:
        st.error(f"Error loading image {path}: {e}")
        return ""

# ---------- Page config ---------- #

st.set_page_config(
    page_title="Savings Dashboard",
    page_icon="💰",
    layout="wide", # Keep wide layout, but CSS will constrain the content block
    initial_sidebar_state="collapsed",
)

# ---------- CSS: FIXED‑WIDTH CONTENT (750px) & FULL-WIDTH BARS ---------- #
FIXED = 750  # px for the main content block
BAR_HEIGHT = 10  # px for the faux status bar - Increased slightly for visibility
NAV_BAR_HEIGHT = 20 # px <<<<< DEFINE HEIGHT FOR NAV BAR
# Combined and modified CSS styles
st.markdown(
    f"""
    <style>
    /* --- General & Hide Streamlit Elements --- */
    #MainMenu, footer, header {{ visibility: hidden; }}
    html, body {{
        background-color: #FFFFFF;
        overflow-x: hidden;
    }}

    /* --- App Container --- */
    [data-testid="stAppViewContainer"] {{
        background-color: #FFFFFF;
    }}

    /* --- Main Content Block (Fixed Width) --- */
    .main .block-container {{
        max-width:{FIXED}px;
        width: 100%;
        margin: 0 auto;
        padding-left: 1rem;
        padding-right: 1rem;
        padding-top: {BAR_HEIGHT + 15}px; /* Adjusted padding */
        padding-bottom: {NAV_BAR_HEIGHT + 20}px; /* Space above bottom nav */
        box-sizing: border-box;
        background-color: #FFFFFF;
        min-height: calc(100vh - {BAR_HEIGHT}px);
    }}
    [data-testid="stAppViewContainer"] > .main {{
        padding-top: 0;
        padding-bottom: 0;
        background-color: transparent;
    }}

    /* --- Top Bar (Full Width, Fixed) --- */
    .mobile-top {{
        position: fixed;
        top: 0; left: 0; right: 0;
        width: 100%;
        height: {BAR_HEIGHT}px;
        background: #1a1d23;
        border-bottom: 1px solid #2e323b;
        z-index: 100;
    }}

    /* --- Bottom Navigation Bar (Full Width, Fixed) --- */
    .mobile-nav {{
        position: fixed;
        bottom: 0; left: 0; right: 0;
        width: 100%;
        background: #1a1d23;
        border-top: 1px solid #2e323b;
        z-index: 999;
        height: {NAV_BAR_HEIGHT}px;
        padding: 0;
        box-sizing: border-box;
    }}
    /* Container INSIDE the bottom nav bar to center the icons */
    .mobile-nav-content {{
        display: flex;
        justify-content: space-around;
        align-items: center;
        max-width: {FIXED}px;
        margin: 0 auto;
        height: 100%;
    }}

    /* --- Styling for st.page_link within the nav --- */
    /* Make the column content behave like a flex item */
    .mobile-nav-content [data-testid="stVerticalBlock"] {{
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
    }}
    /* Target the anchor tag generated by st.page_link */
    .mobile-nav-content a {{
        color: #888;
        text-decoration: none;
        font-size: .9rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        width: 100%; /* Make link fill the column */
        height: 100%; /* Make link fill the column */
        padding: 5px 0;
        box-sizing: border-box;
    }}
    .mobile-nav-content a:hover {{
        color: #ddd;
    }}

    /* --- Active Link Styling --- */
    /* Target the paragraph *inside* the active stPageLink element */
    /* Streamlit might wrap the text in a <p> tag */
    .mobile-nav-content [data-testid="stPageLink-active"] p {{
        color: #fff !important;      /* White text for active */
        font-weight: bold !important; /* Bold text for active */
    }}
    /* Fallback if text is not in <p> or for the icon */
     .mobile-nav-content [data-testid="stPageLink-active"] {{
        color: #fff !important;
        font-weight: bold !important; /* Apply bold to parent too if needed */
    }}
     /* Ensure the icon part (if separate) also gets the color */
     .mobile-nav-content [data-testid="stPageLink-active"] svg {{
        fill: #fff !important; /* Adjust if icons are SVG */
     }}
     .mobile-nav-content [data-testid="stPageLink-active"] i {{
        color: #fff !important; /* Adjust if icons are font icons */
     }}


    /* --- Plotly Chart Styling --- */
    .plotly .plot-container, .stPlotlyChart {{
        max-width: 100% !important;
        overflow-x: hidden !important;
    }}

    /* --- Metric Styling --- */
    [data-testid="stMetric"] {{
        background-color: #262730;
        border-radius: 8px;
        padding: 10px;
        text-align: center;
        color: #fff;
        border: 1px solid #333;
    }}
    [data-testid="stMetricLabel"] {{
        font-size: 0.9rem;
        color: #aaa;
    }}
    [data-testid="stMetricValue"] {{
        font-size: 1.5rem;
        font-weight: bold;
        color: #fff;
    }}
    [data-testid="stMetricDelta"] {{
        display: none;
    }}
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------- TOP BLACK BAR (Full Width) ---------- #
st.markdown(f"<div class='mobile-top'></div>", unsafe_allow_html=True)

# ---------- HEADER (logo + avatar) - Inside the Content Block ---------- #
header_cols = st.columns([1, 5, 1])
with header_cols[0]:
    st.markdown(img_tag(LOGO_FILE, 28), unsafe_allow_html=True)
with header_cols[2]:
    st.markdown(img_tag(PROFILE_FILE, 30), unsafe_allow_html=True)

st.markdown("<h2 style='text-align: center; margin-bottom: 1rem;'>Your RevPoints Savings</h2>", unsafe_allow_html=True)

# ---------- Load Data ---------- #
# (Data loading code remains the same)
if not TRANSACTIONS_FILE.exists():
    st.error(f"Transaction file not found: {TRANSACTIONS_FILE}")
    st.stop()

try:
    with open(TRANSACTIONS_FILE, "r") as f:
        data = json.load(f)
    valid_data = []
    required_keys = ["money_saved", "points_spent", "timestamp", "vendor_name", "actual_price", "percentage_saved"]
    for t in data:
        if t and all(key in t for key in required_keys):
            try:
                t['money_saved'] = float(t['money_saved'])
                t['points_spent'] = int(t['points_spent'])
                t['actual_price'] = float(t['actual_price'])
                t['percentage_saved'] = float(t['percentage_saved']) if t.get('percentage_saved') is not None else 0.0
                valid_data.append(t)
            except (ValueError, TypeError):
                continue

    if not valid_data:
        st.warning("No valid transaction data found after cleaning.")
        st.stop()

    df = pd.DataFrame(valid_data)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['month_year'] = df['timestamp'].dt.to_period('M')
    df['month_year_str'] = df['month_year'].astype(str)
    df['paid_amount'] = df['actual_price'] - df['money_saved']
    df['paid_amount'] = df['paid_amount'].fillna(0) # Ensure NaN handling early

except json.JSONDecodeError:
    st.error(f"Error decoding JSON from {TRANSACTIONS_FILE}")
    st.stop()
except Exception as e:
    st.error(f"Error loading or processing data: {e}")
    st.stop()

# ---------- Key Metrics ---------- #
total_savings = df['money_saved'].sum()
total_points_spent = df['points_spent'].sum()
average_saving_percentage = df[df['money_saved'] > 0]['percentage_saved'].mean() if not df[df['money_saved'] > 0].empty else 0

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Total Saved", f"€{total_savings:,.2f}")
with col2:
    st.metric("Total Points Spent", f"{total_points_spent:,}")
with col3:
    st.metric("Avg. Saving %", f"{average_saving_percentage:.1f}%")

st.markdown("---")

# ---------- Savings Over Time (Overall Trend - Unfiltered) ---------- #
st.markdown("#### Overall Savings Trend")
savings_over_time = df.groupby('month_year_str')['money_saved'].sum().reset_index()
savings_over_time = savings_over_time.sort_values('month_year_str')

if not savings_over_time.empty:
    fig_time = px.line(savings_over_time, x='month_year_str', y='money_saved',
                       labels={'month_year_str': 'Month', 'money_saved': 'Total Savings (€)'},
                       markers=True, template='plotly_dark')
    fig_time.update_layout(xaxis_title=None, yaxis_title="Savings (€)", margin=dict(l=20, r=20, t=30, b=20), paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)')
    fig_time.update_traces(line=dict(color='#1DB954'))
    st.plotly_chart(fig_time, use_container_width=True)
else:
    st.write("Not enough data for a time trend.")

st.markdown("---")

# ---------- Monthly Filtering ---------- #
st.markdown("#### Explore Monthly Performance")
available_months = sorted(df['month_year_str'].unique())
month_options = ["All Months"] + available_months
selected_month = st.selectbox("Select Month:", options=month_options, label_visibility="collapsed")

if selected_month == "All Months":
    filtered_df = df.copy()
    st.markdown(f"##### Showing data for: All Time")
else:
    filtered_df = df[df['month_year_str'] == selected_month].copy()
    st.markdown(f"##### Showing data for: {selected_month}")

if filtered_df.empty and selected_month != "All Months":
    st.warning(f"No data available for {selected_month}.")
elif filtered_df.empty and selected_month == "All Months":
     st.warning("No transaction data available.")
     st.stop()
elif filtered_df.empty:
    pass

# ---------- Charts (Only if filtered_df is not empty) ---------- #
# (Chart generation code remains the same)
if not filtered_df.empty:

    # --- Stacked Bar Chart ---
    st.markdown("#### Spending Breakdown at Top Vendors")
    if 'paid_amount' not in filtered_df.columns:
         st.error("Internal error: 'paid_amount' column missing.")
         st.stop() # Stop if essential calculated column is missing

    savings_by_vendor_for_top = filtered_df.groupby('vendor_name')['money_saved'].sum().reset_index()
    top_vendors_for_stack = savings_by_vendor_for_top.nlargest(10, 'money_saved')
    spend_breakdown = filtered_df[filtered_df['vendor_name'].isin(top_vendors_for_stack['vendor_name'])].groupby('vendor_name')[['money_saved', 'paid_amount']].sum().reset_index()
    spend_breakdown = spend_breakdown.fillna(0)
    spend_breakdown['total_spend'] = spend_breakdown['money_saved'] + spend_breakdown['paid_amount']
    spend_breakdown = spend_breakdown.sort_values('total_spend', ascending=False)

    if not spend_breakdown.empty:
        fig_stacked = go.Figure()
        fig_stacked.add_trace(go.Bar(x=spend_breakdown['vendor_name'], y=spend_breakdown['paid_amount'], name='Amount Paid', marker_color='#EF553B'))
        fig_stacked.add_trace(go.Bar(x=spend_breakdown['vendor_name'], y=spend_breakdown['money_saved'], name='Money Saved (RevPoints)', marker_color='#1DB954'))
        fig_stacked.update_layout(barmode='stack', xaxis_title=None, yaxis_title="Amount (€)", legend_title_text='Spend Type', template='plotly_dark', margin=dict(l=20, r=20, t=30, b=20), height=400, xaxis={'categoryorder':'array', 'categoryarray': spend_breakdown['vendor_name']}, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)')
        st.plotly_chart(fig_stacked, use_container_width=True)
    else:
        st.write("No spending breakdown data available for top vendors in this period.")
    st.markdown("---")

    # --- Savings by Vendor ---
    st.markdown("#### Top Savings by Vendor")
    savings_by_vendor = filtered_df.groupby('vendor_name')['money_saved'].sum().reset_index()
    top_vendors = savings_by_vendor.nlargest(10, 'money_saved').sort_values('money_saved', ascending=True)
    if not top_vendors.empty:
        fig_vendor = px.bar(top_vendors, y='vendor_name', x='money_saved', labels={'vendor_name': 'Vendor', 'money_saved': 'Total Savings (€)'}, orientation='h', template='plotly_dark')
        fig_vendor.update_layout(yaxis_title=None, xaxis_title="Savings (€)", margin=dict(l=10, r=20, t=30, b=20), height=400, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)')
        fig_vendor.update_traces(marker_color='#636EFA')
        st.plotly_chart(fig_vendor, use_container_width=True)
    else:
        st.write("No vendor savings data available for this period.")
    st.markdown("---")

    # --- Average Saving Percentage by Vendor ---
    st.markdown("#### Average Saving Percentage by Vendor")
    if 'percentage_saved' not in filtered_df.columns:
        st.error("Internal error: 'percentage_saved' column missing.")
        st.stop()
    avg_perc_by_vendor = filtered_df.groupby('vendor_name')['percentage_saved'].mean().reset_index()
    avg_perc_by_vendor = avg_perc_by_vendor.dropna(subset=['percentage_saved'])
    top_avg_perc_vendors = avg_perc_by_vendor.nlargest(10, 'percentage_saved').sort_values('percentage_saved', ascending=False)
    if not top_avg_perc_vendors.empty:
        fig_avg_perc = px.bar(top_avg_perc_vendors, x='vendor_name', y='percentage_saved', labels={'vendor_name': 'Vendor', 'percentage_saved': 'Average Saving (%)'}, template='plotly_dark')
        fig_avg_perc.update_layout(xaxis_title=None, yaxis_title="Average Saving (%)", margin=dict(l=20, r=20, t=30, b=20), height=400, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)')
        fig_avg_perc.update_traces(marker_color='#AB63FA')
        fig_avg_perc.update_xaxes(tickangle=45)
        st.plotly_chart(fig_avg_perc, use_container_width=True)
    else:
        st.write("No average saving percentage data available for this period.")


# ---------- BOTTOM NAVIGATION (using st.page_link in columns) ---------- #
HOME_PATH = Path(__file__).parent.parent / "home.py"
NAV = [
    ("Home", "🏠", "home.py"),
    ("Explore", "🔍", "pages/2_Explore.py"),
    ("Notifications", "🔔", "pages/3_Notifications.py"),
    ("Savings", "💰", "pages/6_savings.py"),
]

st.markdown('<div class="mobile-nav">', unsafe_allow_html=True)
st.markdown('<div class="mobile-nav-content">', unsafe_allow_html=True)

# Create columns *inside* the centered container
cols = st.columns(len(NAV))
for (label, icon, page), col in zip(NAV, cols):
    with col:
        st.page_link(page=page, label=label, icon=icon, use_container_width=True)
st.markdown('</div>', unsafe_allow_html=True)
